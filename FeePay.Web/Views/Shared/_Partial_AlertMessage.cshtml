<link href="~/lib/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
<link href="~/lib/sweetalert2/sweetalert2-material-ui.min.css" rel="stylesheet" />
<script src="~/lib/sweetalert2/sweetalert2.all.min.js"></script>
@{
    var IsTosMsg = false;
    var IsAltMsg = false;
    var TosMsg = TempData["TostMessage"];
    var AltMsg = TempData["AlertMessage"];
    if (TosMsg != null && !string.IsNullOrWhiteSpace(TosMsg.ToString())) { IsTosMsg = true; }
    if (AltMsg != null && !string.IsNullOrWhiteSpace(AltMsg.ToString())) { IsAltMsg = true; }

}
<script>
    "use strict";
    $(function () {
        const sweetToast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            //timer: 3000
        });
        let timerInterval
        const sweetModelAutoClose = Swal.mixin({
            //timer: 3000,
            timerProgressBar: false,
            onBeforeOpen: () => {
                Swal.showLoading()
                timerInterval = setInterval(() => {
                    const content = Swal.getContent()
                    if (content) {
                        const b = content.querySelector('b')
                        if (b) b.textContent = Swal.getTimerLeft()
                    }
                }, 100)
            },
            onClose: () => { clearInterval(timerInterval) }
        });
        $(window).on("load", function () {
            if (@(IsTosMsg.ToString().ToLower())) sweetToast.fire({ @Html.Raw(TosMsg) });
            if (@(IsAltMsg.ToString().ToLower()))
                sweetModelAutoClose.fire({ @Html.Raw(AltMsg) })
                    .then((result) => { if (result.dismiss === Swal.DismissReason.timer) console.log('I was closed by the timer') });


        });
    });
</script>



